name: Merge Staging to Main
run-name: Merging staging of ${{ github.event.client_payload.repo_name }} to main (Triggered by ${{ github.event.client_payload.parent_sha }})

on:
  repository_dispatch:
    types:
      - merge-staging-to-main

permissions: write-all

jobs:
  merge-and-dispatch:
    runs-on:
      - self-hosted
      - sdk
    timeout-minutes: 10
    steps:
      - name: Clean Workspace
        run: |
          sudo rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GC_DCI_TOKEN }}
          fetch-depth: 0

      - name: Fetch Staging Branch
        run: git fetch origin staging

      - name: Get Last Staging Commit Message
        id: get_staging_message
        run: |
          # Get the last commit message from the staging branch
          LAST_STAGING_COMMIT_MESSAGE=$(git log -1 --pretty=%B origin/staging)
          echo "LAST_STAGING_COMMIT_MESSAGE=$LAST_STAGING_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check Diff Between Main and Staging
        id: check_diff
        run: |
          if git diff --quiet main origin/staging; then
            echo "::notice::No differences between main and staging. Skipping merge."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::Differences found. Proceeding with merge."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Merge Staging to Main (Squash)
        if: steps.check_diff.outputs.has_changes == 'true'
        run: |
          git merge --squash origin/staging -m "${{ env.LAST_STAGING_COMMIT_MESSAGE }}"
          git commit -m "${{ env.LAST_STAGING_COMMIT_MESSAGE }}"
          git push origin main

      - name: Recreate Staging Branch from Main
        if: steps.check_diff.outputs.has_changes == 'true'
        run: |
          echo "Deleting remote origin/staging branch..."
          git push origin --delete staging || true # Ignore error if branch doesn't exist
          
          echo "Checking out main branch and pulling latest..."
          git checkout main
          git pull origin main
          
          echo "Creating new staging branch from main..."
          git checkout -b staging
          
          echo "Pushing new staging branch to origin..."
          git push -u origin staging

      - name: Get New Main SHA
        id: get_sha
        run: echo "main_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Dispatch Update to Parent Repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GC_DCI_TOKEN }}
          repository: ${{ github.event.client_payload.parent_owner }}/${{ github.event.client_payload.parent_repo }}
          event-type: update-submodule-from-child
          client-payload: |
            {
              "submodule_name": "${{ github.event.client_payload.repo_name }}",
              "submodule_sha": "${{ steps.get_sha.outputs.main_sha }}",
              "submodule_ref": "main",
              "parent_ref": "${{ github.event.client_payload.parent_ref }}"
            }
